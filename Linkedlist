Class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None 
class Linkedlist:
    def __init__(self):
        self.head=None 
    def print_LL(self):
        if self.head==None:
            print("Linkedlist is empty")
        else:
            n=self.head
            while n is not None:
                print(n.data,end=" ")
                n=n.ref
    def add_begin(self,data):
        newnode=Node(data)
        if self.head==None:
            self.head=newnode
        else:
            newnode.ref=self.head
            self.head=newnode
    def add_end(self,data):
        newnode=Node(data)
        if self.head==None:
            self.head=newnode
        else:
            n=self.head
            while n.ref is not None:
                n=n.ref 
            n.ref=newnode
    def add_after(self,data,x):
        newnode=Node(data)
        if self.head==None:
            self.head=newnode
            return
        n=self.head
        while n is not None:
            if n.data==x:
                break
            n=n.ref 
        if n is None:
            print("element is absent")
        else:
            newnode.ref=n.ref 
            n.ref=newnode
    def add_before(self,data,x):
        newnode=Node(data)
        if self.head==None:
            self.head=newnode
            return
        n=self.head
        if n.data==x:
            newnode.ref=self.head
            self.head=newnode
            return
        while n.ref is not None:
            if n.ref.data==x:
                break
            n=n.ref
        if n.ref is None:
            print("element is absent")
        else:
            newnode.ref=n.ref 
            n.ref=newnode
    def insert_empty(self,data):
        if self.head is not None:
            print("Linkedlist is not empty")
        else:
            newnode=Node(data)
            self.head=newnode
    def delete_begin(self):
        if self.head==None:
            print("Linkedlist is empty")
        else:
            self.head=self.head.ref
    def delete_end(self):
        if self.head==None:
            print("Linkedlist is empty")
            return
        n=self.head
        while n.ref.ref is not None:
            n=n.ref 
        n.ref=None
    def delete_by_value(self,x):
        if self.head==None:
            print("Linkedlist is empty")
            return
        if self.head.data==x:
            self.head.ref=self.head
            return
        n=self.head
        while n.ref is not None:
            if n.ref.data==x:
                break 
            n=n.ref
        if n.ref is None:
            print("element is absent")
        else:
            n.ref=n.ref.ref
        
        
ll1=Linkedlist()
ll1.add_begin(10)
ll1.add_begin(20)
ll1.add_end(20)
ll1.add_end(30)
ll1.add_begin(40)
ll1.add_after(50,30)
ll1.add_before(60,50)
ll1.insert_empty(10)
ll1.delete_begin()
ll1.delete_end()
ll1.delete_by_value(60)
ll1.print_LL()